############################################################################
                     Steps to create build setup
############################################################################
Environment:
os : ubuntu 20.04
HDD : 500gb
RAM : 32gb
core: 12 core
############################################################################

Make sure vm has nested virtualization enabled. 
Steps to check nested virtualization enabled or not 

sonic@sonicpc:~$ lsmod | grep kvm

kvm_intel             286720  0
kvm                   663552  1 kvm_intel

here 1 means it is enable, if it is 0 it is disable

############################################################################
						build steps
	Ref : https://github.com/sonic-net/sonic-buildimage
############################################################################

	1. Please follow link to install pre-requisites and docker installation
	2. git clone --recurse-submodules https://github.com/sonic-net/sonic-buildimage.git
	   or git clone https://github.com/Azure/sonic-buildimage.git
# Ensure the 'overlay' module is loaded on your development system
	3. sudo modprobe overlay

# Enter the source directory
	4. cd sonic-buildimage

# (Optional) Checkout a specific branch. By default, it uses master branch.
# For example, to checkout the branch 201911, use "git checkout 201911"
# we used 202205 branch 
	5. git checkout 202205

# Execute make init once after cloning the repo, or after fetching remote repo with submodule updates
	6. make init

# Execute make configure once to configure ASIC, we are using vs.
#make configure PLATFORM=[ASIC_VENDOR]
	7. make configure PLATFORM=vs	

# Build SONiC image with 4 jobs in parallel.
# Note: You can set this higher, but 4 is a good number for most cases
# and is well-tested.
# There's few ways to build, please follow below link to check how to generate binaries
Ref : https://hackmd.io/@rossano/r1TXEjQW5
      https://github.com/sonic-net/sonic-buildimage/issues/14312
	8. make SONIC_BUILD_JOBS=4 all

Target specific build can be generated using below command
make SONIC_BUILD_JOBS=4 target/sonic-vs.img.gz 

if you want to build specific container you can use below command, for e.g we only want to build docker-platform-monitor
make SONIC_BUILD_JOBS=4 target/docker-platform-monitor.gz 

############################################################################
		Errors while building sonic
############################################################################

Error 1 : kvm: failed to initialize kvm:
Solution : Please enable nested virtualization

qm set 112 --cpu host
modprobe -r kvm_intel
cat /etc/modprobe.d/kvm-intel.conf
cat /sys/module/kvm_intel/parameters/nested

++ echo '============= kvm_log =============='
============= kvm_log ==============
++ cat /tmp/tmp.j94hHo7wxF
WARNING: Image format was not specified for './sonic-installer.img' and probing guessed raw.
         Automatically detecting the format is dangerous for raw images, write operations on block 0 will be restricted.
         Specify the 'raw' format explicitly to remove the restrictions.
Could not access KVM kernel module: No such file or directory
kvm: failed to initialize kvm: No such file or directory
kvm: falling back to tcg
kvm: -serial telnet:127.0.0.1:9000,server: info: QEMU waiting for connection on: disconnected:telnet:127.0.0.1:9000,server
kvm: Slirp: external icmpv6 not supported yet
kvm: Slirp: external icmpv6 not supported yet
kvm: Slirp: external icmpv6 not supported yet
kvm: Slirp: external icmpv6 not supported yet
kvm: Slirp: external icmpv6 not supported yet
kvm: Slirp: external icmpv6 not supported yet
+ on_exit
+ rm -f /tmp/tmp.j94hHo7wxF
[  FAIL LOG END  ] [ target/sonic-vs.img.gz ]
make: *** [slave.mk:1105: target/sonic-vs.img.gz] Error 1
make[1]: *** [Makefile.work:426: target/sonic-vs.img.gz] Error 2
make[1]: Leaving directory '/home/sonic/prakash/sonic-buildimage'
make: *** [Makefile:33: target/sonic-vs.img.gz] Error 2

############################################################################

Error 2 : No swap limit
Solution : please verify you must be having enough memory 
           After verify please do 
		   make clean
		   and build the solution again
sonic@sonicpc:~/prakash/sonic-buildimage$ make SONIC_BUILD_JOBS=4 all > logs.txt

./scripts/run_with_retry: line 4: [: : integer expression expected
./scripts/run_with_retry: line 4: [: : integer expression expected
make[1]: *** [Makefile.work:426: all] Error 2
make: *** [Makefile:33: all] Error 2

errors pretty printing info^M
WARNING: No swap limit support^M
############################################################################

############################################################################
						deploy steps 
############################################################################

1. extract=1 ./sonic-vs.bin  => this is what we have generated after the sonic build
   This will extract the files inside /tmp/tmp.XXXXX/installer path
2. sudo apt install qemu-utils
3. qemu-img create -f qcow2 ~/sonic.img 10G
   output => Formatting '/home/sonic/sonic.img', fmt=qcow2 size=10737418240 cluster_size=65536 lazy_refcounts=off refcount_bits=16
4. sudo modprobe nbd
5. sudo qemu-nbd -c /dev/nbd0 ~/sonic.img
6.      ◦ $ press ‘d’ to delete all the partitions
        ◦ $ press ‘n’ to create new partition and press enter four times to select default start and 
		    end sectors for the newly created partition.
        ◦ $ press ‘w’ to save the partition information on the USB stick
7. sudo partprobe
8. Use below command to format the newly created partition to EXT4
9. sudo mkfs.ext4 /dev/nbd0p1
   this will take few seconds to finish. once you finish you'll get outpul like,
	mke2fs 1.45.5 (07-Jan-2020)
	Discarding device blocks: failed - Input/output error
	Creating filesystem with 2621184 4k blocks and 655360 inodes
	Filesystem UUID: ac268188-89ae-4f03-84e6-9eea1004d9c6
	Superblock backups stored on blocks:
        32768, 98304, 163840, 229376, 294912, 819200, 884736, 1605632

	Allocating group tables: done
	Writing inode tables: done
	Creating journal (16384 blocks): done
	Writing superblocks and filesystem accounting information: done
10. sudo mount /dev/nbd0p1 ~/sonic
11. go to extracted folder in step 1.
12. cd /tmp/tmp.xxxxx/installer 
13. sudo apt install unzip 
14. unzip fs.zip to get dockerfs.tar.gz and fs.squashfs
15. unzip fs.zip 
	Extract fs.squashfs file with below command to extract its content in ~/sonic folder
16. sudo unsquashfs -d ~/sonic -f fs.squashfs
17.	sudo mkdir -p ~/sonic/opt/lib/docker
18. cd ~/sonic/opt/lib/docker
19. sudo tar xvf ~/tmp/tmp.XXXX/installer/dockerfs.tar.gz

//building sonic-linux


qemu-system-x86_64 -kernel vmlinuz -nographic -append "root=/dev/sda1 console=ttyS0 rw" -m 8G -enable-kvm -hda sonic.img -smp 4
qemu-system-x86_64 -machine q35 -m 2048 -smp 4 -hda sonic-vs.img -nographic -netdev user,id=sonic0,hostfwd=tcp::5555-:22 -device e1000,netdev=sonic0
qemu-system-x86_64 -machine q35 -m 2048 -smp 4 -hda sonic-vs.img -nographic -netdev user,id=sonic0,hostfwd=tcp::6666-:22 -device e1000,netdev=sonic0

sudo qemu-system-x86_64 -machine ubuntu -m 2048 -smp 4 -hda sonic-vs.img -nographic -netdev user,id=sonic0,hostfwd=tcp::5555-:22 -device e1000,netdev=sonic0
ssh localhost -p 5555

======logs on SONiC vm==========
admin@sonic:~$ docker ps -a
CONTAINER ID   IMAGE                            COMMAND                  CREATED      STATUS       PORTS     NAMES
9af949ab55e5   docker-gbsyncd-vs:latest         "/usr/local/bin/supe…"   2 days ago   Up 2 hours             gbsyncd
178407331f28   docker-syncd-vs:latest           "/usr/local/bin/supe…"   2 days ago   Up 2 hours             syncd
20dd38fb4f6c   docker-snmp:latest               "/usr/local/bin/supe…"   2 days ago   Up 2 hours             snmp
cf3af158554a   docker-orchagent:latest          "/usr/bin/docker-ini…"   2 days ago   Up 2 hours             swss
11e2e18484fb   docker-platform-monitor:latest   "/usr/bin/docker_ini…"   2 days ago   Created                pmon
fe3ffe24337e   docker-database:latest           "/usr/local/bin/dock…"   2 days ago   Up 2 hours             database
admin@sonic:~$ docker ps images





############################################################################
				SONiC BuildImage repository Guide
Ref : https://github.com/sonic-net/sonic-buildimage/blob/master/README.buildsystem.md
############################################################################
sonic-buildimage is main repo that contains SONiC code, links to all sub-repos, build related files, platform/device specific files etc. 
Sonic buildimage consists of two main parts : 

sonic-buildimage
 |
 |_Makefile
 |_slave.mk
 |_sonic-slave/
 | |_dockerfile
 |_rulese/
 |	|_config
 |	|_...
 |	|_...
 |_dockers/
 |	|_docker-database
 |		|_dockerfile.j2
 |	|_...
 |_src/
 |	|_sonic-swss
 |	|_sonic-sairedis
 |	|_redis
 |	|_sonic-utilities
 |	|_sonic-telemetry
 |	|_sonic-frr/quagga
 |_platform/
 |	|_barefoot
 |	|_vs
 |	|_...
 |_target/
	|_pyhton-wheels
	|_debs/
	|_docker-xxx.gz
	|_sonic-vs.img
	|_...

	
1. Makefile
2. slave.mk
		- slave.mk is the actual makefile here, defines the set of rules for provided targets.
3. sonic-slave/Dockerfile
		- sonic-slave is the container being created to execute complete build process. 
		- If build started for the first time on perticular host, a new sonic-slave image get's build from sonic-slave/Dockerfile.
		- Makefile takes every target that is passed to make command and elegates it as an entry point to a sonic-slave container.
		
	- Makefile
	- slave.mk
	- sonic-slave/Dockerfile
	are the backend of buildimage. 
	
4. rulese
		- has a collection of recipes(small makefiles) that describes a metadata of a specific target which is needed for the build.
		- all the recipes are given as small make files for all the targets.
		- config
			- configuration parameters for sonic build, for e.g. number of jobs for parallel build, target specific dependencies, usr name pswrd etc.
	
5. dockers 
		- contains all the dockerfiles for generic docker images.
		- each folder container the file that explains about the processes that needs to run inside that docker.
		- e.g. docker-sonic-mgmt
		       docker-snmp 
			   docker-sonic-database etc

6. src  
		- source code for generic packages. 
		- directories having more complex component and each one has their own makefile. 
		
		- sonic-swss
		- sonic-sairedis
		- redis
		- sonic-utilities
		- sonic-telemetry
		- sonic-frr/quagga

7. platform
		- vendor specific code.
		- includes the required 
			- kernel drivers
			- platform sensors script for fetching the data from hw. 

8. target
		- a build output directory. 

4. files/
	
=======================src/==================================
1. src/sonic-swss
	- https://github.com/sonic-net/sonic-swss
	- The Switch state service : process the network data.
	- collection of software that provides a database interface for communication with and 
      state representation of network application and network switch hardware.

	- this repository contains the source code for 
		- swss container
		- teamd container
		- bgp container
	
	- when swss container starts, start.sh starts few processes like 
		portsyncd, intfsyncd, neighsyncd, orchagent, swssconfig etc. 
	
	- fpmsyncd
		- contains code for the process that runs in bgp container.
		- runs TCP server and listen the msges from zebra for route changes and write the routes to 
		  APPL_DB.
		- waits for clients to connect, then provides the route updates.
		
	- portsyncd
		- code to build 'portsyncd' process. 
		- reads config_db.json file and add port configs to APP_DB.
		
	-  orchagent
		- most critical component in swss subsystem.
		- consumer for (state coming from APPL_DP)APPL_DB and producer to ASIC_DB (state being pushed into ASIC_DB).
		
	
	- intfsyncd
	- neighsyncd
	- intfmgrd
	- vlanmgrd
	- TeamSyncd

2. src/sonic-sairedis
		- https://github.com/sonic-net/sonic-sairedis
		- SAI - https://github.com/opencomputeproject/SAI
		- C++ library code for interfacing to SAI objects in Redis.
		
		- Provides a SAI redis service build on the top of redis database. Contains two major components
			- SAI Library -> puts SAI object into the redis database(ASIC_DB).
			- syncd -> takes the SAI object and puts them into ASIC. 

3. src/redis
		- Runs the REDIS server.
			   - APPL_DB : stores states generated by all application containers, routers, next hopes neighbours etc. 
			               e.g. fpmsyncd stores fib received from zebra to APPL_DB
			   - CONFIG_DB  : /etc/sonic/config_db.json
						  : stores the configuration states created by all sonic app. 
						  : port configuration, interface configuration, vlans etc. 
			   - STATE_DB : 
			   - ASIC_DB
			   - COUNTERS_DB : stores counters/statistics associated to each port in the system.  
			                   this states can be utilized to satisfy CLI request
							   
							   
			   - src/redis/Makefile
					- installing redis-server redis-tools etc
					
			   - redis-cli:/usr/bin/redis-cli
			   - /var/run/redis/sonic-db/database_config.json
			   - /etc/sonic/database_global.json
			   - database_config.json.j2 -> list of DB supports and it's id
			   
4. sonic-utilities
		-  contains the code for CLI for SONiC​
		-  CLI commands like "config" "show" "clear".​
		-  there are few scripts available, which used by the cli commands, users are not supposed to use it directly.​
		-  few other utilities give like,
			- to connect other SONiC devices and manage them from current device.
			
5. sonic-telemetry
		- contains the implementation for the sonic system telemetry services : go implementation
			- dial-in mode system telemetry server. telemetry
			- dial-out mode system telemetry client, dialout_client_cli
			

6. sonic-frr/quagga	

		- sonic-frr : https://github.com/sonic-net/sonic-frr/tree/79188bf710e92acf42fb5b9b0a2e9593a5ee9b05
		- quagga    : https://github.com/sonic-net/sonic-quagga/tree/debian/0.99.24.1
		
		- user can use either Quagga or FRR routing stack as pee the requirement.  https://github.com/sonic-net/sonic-utilities/blob/master/doc/Command-Reference.md#routing-stack
		- separate shell vtysh is given to configure such routing stacks. 
		- check inside sonic with command  : show version
		- it will show docker-fpm-quagga/docker-fpm-frr, based on which routing stack is used
		
		- Versions >= 201904 using default FRR routing stack
			- show bgp summary
		- Versions <= 201811 using Quagga routing stack
			- show ip bgp summary
		- to check which routing stack is cuurenty using can run command in sonic
			- show startupconfiguration bgp
		- sonic-utilities/build/lib/clear/main.py : get_routing_stack()

		- show version
		- show startupconfiguration bgp



important links : 

command reference : https://github.com/sonic-net/sonic-utilities/blob/master/doc/Command-Reference.md		
SONiC Source Repositories : https://github.com/sonic-net/SONiC/blob/master/sourcecode.md
SONiC Buildimage Guide    : https://github.com/sonic-net/sonic-buildimage/blob/master/README.buildsystem.md	

########################################################################
				sonic-mgmt
Ref : https://github.com/sonic-net/sonic-mgmt
############################################################################

- Management and automation code used for SONiC testbed deployment, tests and reporting.

- Ansible is the main tool here used for,
	- deploye and setup testbed.
	- interact with various devices in testbed.

- Folder structure

	- ansible 
	- docs
	- spytest
		- automation framework and tests for validating SONiC
	- test_peporting
	- tests
	- api_wiki
		- how to communicate between localhost/dut/ptf. useful for test writing. 
	
	
###########################################################################################
Dockers running in SONiC.
###########################################################################################

1. syncd 	   - Runs processes like syncd & dsserve which is used to sync the application data into the ASIC.
			   - (sonic-buildimage/src/sonic-sairedis/syncd)
2. dhcp_relay  - Runs the DHCP relay agent process.
			   - (sonic-buildimage/src/dhcprelay)
3. snmp 	   - Runs the SNMP agent daemon
			   - (sonic-buildimage/src/snmpd, sonic-buildimage/src/sonic-snmpagent)
4. swss (orchagent) 
			   - Runs the orchagent, portsyncd, neighsyncd, vrfmgrd, vlanmgrd, intfmgrd, portmgrd, buffermgrd, nbrmgrd & vxlanmgrd.
			   - portsyncd - port_config.ini
			   - intfsyncd
			   - neighsyncd
			   - orchagent
			   - intfmgrd
			   - vlanmgrd
			   - (sonic-buildimage/src/sonic-swss)
			   
5. teamd       - Runs the teammgrd and teamsyncd processes.
			   - teamd
			   - teamsyncd
			   - (sonic-buildimage/src/sonic-swss/teamsyncd, tlm_teamd)
			   
6. bgp (fpm-frr) 
			   - Runs bgpcfgd, zebra, staticd, bgpd & fpmsyncd
			   - bgpd - Regular BGP implementation.routing state from external parties(frr), 
			            pushed down to forwarding plane using zebra. 
			   - zebra - Traditional IP routing manager
			   - fpmsyncd - collecting FIB state from zebra and dump it's content into APPL_DB
			   - (sonic-buildimage/src/sonic-swss/fpmsyncd, sonic-buildimage/src/sonic-frr/frr/bgpd)

7. lldp 	   - Runs the lldp process and lldpmgrd
			   - lldpd (sonic-buildimage/src/lldpd)
			   - lldpmgrd 
			   - lldp_syncd (sonic-buildimage/src/sonic-dbsyncd/src/lldp_syncd)(python code)
			   

8. pmon (platform-monitor) 
			   - Runs the platform daemons xvrd (listens for SFP events) & psud (listens for power supply related events).

9. database    - Runs the REDIS server.
			   - APPL_DB : stores states generated by all application containers, routers, next hopes neighbours etc. 
			               e.g. fpmsyncd stores fib received from zebra to APPL_DB
			   - CONFIG_DB  : /etc/sonic/config_db.json
						  : stores the configuration states created by all sonic app. 
						  : port configuration, interface configuration, vlans etc. 
			   - STATE_DB : 
			   - ASIC_DB
			   - COUNTERS_DB : stores counters/statistics associated to each port in the system.  
			                   this states can be utilized to satisfy CLI request
							 
10. telemetry - Runs processes like telemetry & dialout_client_cli

11. mgmt-framework

12. radv (router-advertise) - - Runs the IPv6 router advertisement process

13. gbsyncd 		

14. eventd					 

==============================================================================================



10.  
			   - Runs the IPv6 router advertisement process

###########################################################################################

// TODO
try this command and use sonic-vs.img from azure pipeline

sudo qemu-system-x86_64 
	-machine ubuntu 
	-m 2048 
	-smp 4 
	-hda sonic-vs.img 
	-nographic 
	-netdev user,id=sonic0,hostfwd=tcp::5555-:22 
	-device e1000,netdev=sonic0



 sonic-buildimage
 |
 |_Makefile
 |_slave.mk
 |_sonic-slave/
 | |_dockerfile
 |_rulese/
 |	|_config
 |	|_...
 |	|_...
 |_dockers/
 |	|_docker-database
 |		|_dockerfile.j2
 |	|_...
 |_src/
 |	|_sonic-swss
 |	|_sonic-sairedis
 |	|_redis
 |	|_sonic-utilities
 |	|_sonic-telemetry
 |	|_sonic-frr/quagga
 |_platform/
 |	|_barefoot
 |	|_vs
 |	|_...
 |_target/
	|_pyhton-wheels
	|_debs/
	|_docker-xxx.gz
	|_sonic-vs.img
	|_...
	
	
	
 sonic-swss
 |
 |
 |_fpmsyncd
 |_neighsyncd
 |_orchagent
 |_teamsyncd
 |_tests
 |_config
	
	
	
 sonic-gnmi
 |
 |
 |_dialout
 |_doc
 |_gnmi_server
 |_gnmi_client
 |_sonic_data_client
 |_sonic_db_config
 |_sonic_Service_client
 |_swsscommon
 |_telemetry
 |_test
 |_test_utils


 sonic-mgmt
 |
 |_ansible [deploy SONiC, setup SONiC testbed, run SONiC test, test report processing]
 |_docs 
 |_spytest [test automation framework designed to validate SONiC]
 |_test_reporting
 |_test
    |_all scrpts
	|_run_scripts
	|_logs
	
	
 tests
 |
 |_common
 |_platform
 |_ptftests
 |_nat
 |   |_test_nat_bindings.py
 |	 |_files
 |		|_all helpers for the nat feature​
 |_acl

#######################sonic CI/CD#########################
 sonic-net/sonic-pipelines
 |
 |_azure pipelines
	|_scripts
		|_collect_build_logs.py
		|_collect_commits.py
	|_xxxx.yml files
 |_scripts
	|_build_and_install_modules
	|_provision.sh
	
##########################################################
	





//deploy sonic as container
https://github.com/sonic-net/sonic-buildimage/blob/master/platform/vs/README.vsdocker.md
sonic@sonicpc:~/prakash/sonic-buildimage/platform/vs$ sudo ./create_vnet.sh -n 2 sw
Seting up servers
Bring sw-srv0eth0 up
Bring eth1 up in the virtual switch docker
Bring sw-srv1eth0 up
Bring eth2 up in the virtual switch docker


sw-srv0 10.0.0.1  def route eth0(10.0.0.0)<vs>eth4(10.0.0.2)=======sw-srv1 10.0.0.3